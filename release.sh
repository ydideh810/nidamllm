#!/usr/bin/env bash

set -e

# Function to print script usage
print_usage() {
  echo "Usage: $0 --release <major|minor|patch|alpha>"
}

# Function to validate release argument
validate_release() {
  local release=$1
  case $release in
    major|minor|patch|alpha) return 0 ;;
    *) return 1 ;;
  esac
}

# Check if the required release flag is provided
if [[ $1 != "--release" || -z $2 ]]; then
  echo "Error: Missing or incorrect release option."
  print_usage
  exit 1
fi

release=$2

if ! validate_release "$release"; then
  echo "Error: Invalid release argument. Allowed values: major, minor, patch, alpha."
  print_usage
  exit 1
fi

# Fetch the latest tag version
version="$(git describe --tags --abbrev=0 --always 2>/dev/null || echo 'v0.0.0')"
VERSION="${version#v}"

# Initialize variables for alpha versioning
ALPHA=""
ALPHA_NUM=0

# Check if version is an alpha release and parse accordingly
if [[ $VERSION =~ -alpha ]]; then
  BASE_VERSION="${VERSION%-alpha*}"
  ALPHA="alpha"
  ALPHA_NUM="${VERSION##*-alpha.}"
  [[ $ALPHA_NUM =~ ^[0-9]+$ ]] || ALPHA_NUM=0
else
  BASE_VERSION="$VERSION"
fi

# Save current IFS and split the base version
OLD_IFS=$IFS
IFS='.' read -ra VERSION_BITS <<<"$BASE_VERSION"
IFS=$OLD_IFS

# Assign split version numbers
VNUM1=${VERSION_BITS[0]:-0}
VNUM2=${VERSION_BITS[1]:-0}
VNUM3=${VERSION_BITS[2]:-0}

# Adjust version numbers based on release type
case $release in
  major)
    VNUM1=$((VNUM1 + 1))
    VNUM2=0
    VNUM3=0
    ALPHA=""
    ;;
  minor)
    [[ -n $ALPHA ]] && ALPHA="" || VNUM2=$((VNUM2 + 1))
    VNUM3=0
    ;;
  patch)
    VNUM3=$((VNUM3 + 1))
    ALPHA=""
    ;;
  alpha)
    if [[ -n $ALPHA ]]; then
      ALPHA_NUM=$((ALPHA_NUM + 1))
    else
      VNUM2=$((VNUM2 + 1))
      VNUM3=0
      ALPHA="alpha"
      ALPHA_NUM=1
    fi
    ;;
esac

# Construct the new version string
if [[ -n $ALPHA ]]; then
  RELEASE_VERSION="$VNUM1.$VNUM2.$VNUM3-$ALPHA.$ALPHA_NUM"
else
  RELEASE_VERSION="$VNUM1.$VNUM2.$VNUM3"
fi

# Commit count for tracking
COMMIT_COUNT=$(git rev-list --count HEAD 2>/dev/null || echo 0)

echo "Commit count: $COMMIT_COUNT"
echo "Releasing tag v${RELEASE_VERSION}..."

git tag -a "v${RELEASE_VERSION}" -m "Release ${RELEASE_VERSION} [generated by GitHub Actions]"
git push origin "v${RELEASE_VERSION}"

echo "Successfully released NIDAM v${RELEASE_VERSION}"
